import { Component, h } from '@stencil/core';
import { Forms } from '../../utils/forms/forms';
import { getInputJSX } from '../../utils/forms/utils';

@Component({
  tag: 'app-first-dashboard',
  styleUrl: 'app-first-dashboard.css',
})
export class AppFirstDashboard {

  render() {
    const dashboardForm = Forms["dashboard"];
    const queryForm = Forms["query"];

    return (
      [
        <ion-header>
          <ion-toolbar color="primary">
            <ion-title>First Dashboard Setup</ion-title>
          </ion-toolbar>
        </ion-header>,

      <ion-content class="ion-padding">

        <svc-surface>
          <ul>
            <li>
              A dashboard represents a page, with a title and related queries.
            </li>
            <li>
              A query is made of two things: data and chart(s).
            </li>
            <li>
              Depending on the format of the data generated by the query, we have specific charts available to visualize it.
            </li>
          </ul>
        </svc-surface>

        <fieldset>
          <legend>Dashboard Config</legend>
          <form>
            {
              dashboardForm && Object.keys(dashboardForm.fields).map((field) => {
                return getInputJSX(dashboardForm, field);
              })
            }
          </form>
        </fieldset>

        <fieldset>
          <legend>Query Config</legend>
          <form>

          <div class={"form__container-input"}>
            <label class={"form__label invisible"}>Data Source</label>
            <select>
              <option value="tasy" selected>Tasy</option>
            </select>
          </div>

          <div class={"form__container-input"}>
            <label class={"form__label invisible"}>DB Query</label>
            <select>
              <option value="tasy" selected>Pre-Defined Consult #1</option>
              <option value="tasy" selected>Pre-Defined Consult #2</option>
              <option value="tasy" selected>Pre-Defined Consult #3</option>
            </select>
          </div>

          <div class={"form__container-input"}>
            <label class={"form__label invisible"}>Chart</label>
            <select>
              <option value="tasy" selected>Pie</option>
              <option value="tasy" selected>Bars</option>
              <option value="tasy" selected>Map</option>
            </select>
          </div>
            {
              queryForm && Object.keys(queryForm.fields).map((field) => {
                return getInputJSX(queryForm, field);
              })
            }
          </form>
        </fieldset>

        <ion-button href="/first-setup/feedback" expand="block">
          Next
          <ion-icon slot={"end"} name={"arrow-forward-circle"} />
        </ion-button>
      </ion-content>,

      <ion-footer>
        <ion-toolbar color={"primary"}></ion-toolbar>
      </ion-footer>
      ]
    );
  }

}
